#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

//ref https://github.com/klejah/ResponsiveGrassDemo/blob/master/ResponsiveGrassDemo/shader/Grass/GrassUpdateForcesShader.cs
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades{
	Blade blades[];
};

layout(set = 2,binding = 1) buffer CulledBlades{
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    uint index = gl_GlobalInvocationID.x;
    
    Blade CurBlade = blades[index];
    vec3 CurV0 = CurBlade.v0.xyz;
    vec3 CurV1 = CurBlade.v1.xyz;
    vec3 CurV2 = CurBlade.v2.xyz;
    vec3 CurUp = CurBlade.up.xyz;

    float blade_angle = CurBlade.v0.w;
    float blade_height = CurBlade.v1.w;

#pragma region GRAVITY
    const vec4 D = vec4(0.0, -1.0, 0.0, 9.8);
    float t = 0.5; // interpolation factor 
    vec3 gE = normalize(D.xyz) * D.w;

    float sd = sin(blade_angle);
    float cd = cos(blade_angle);
    vec3 tmp = vec3(sd, sd + cd, cd);
    vec3 blade_width_dir = normalize(cross(CurUp, tmp));
    vec3 blade_front_dir = normalize(cross(CurUp, blade_width_dir));
    vec3 gF = 0.25 * length(gE) * blade_front_dir;

    vec3 g = gE + gF;
#pragma endregion

#pragma region RECOVER
    float stiffness = CurBlade.up.w;
    vec3 idle_v2 = CurV0 + blade_height * normalize(CurUp); 
    vec3 r = (idle_v2 - CurV2) * stiffness;

#pragma endregion

#pragma region WIND
    vec3 wind_dir = normalize(vec3(1, 0, 1));
    float waveInterval = 1.2;
    float wind_speed = 5.0;
    float wavecoeff = 1*(cos(( dot(CurV0,wind_dir)- wind_speed * totalTime) / waveInterval) );
    // wind alignment, blade orthogonal should face more force
    float fd = 1.0 - abs(dot(wind_dir, normalize(CurV2 - CurV0)));
    float fr = dot((CurV2 - CurV0), CurUp) / blade_height;
    
    vec3 w = wind_dir * wavecoeff * fd * fr;

#pragma endregion
    
    // TODO
    vec3 v2_dx = (g + r + w) * deltaTime;
    vec3 fv2 = CurV2 + v2_dx;

    // State Validate
    fv2 = fv2 - CurUp * min(CurUp * (fv2 - CurV0), 0.0); // (9)

    float l_proj = length(fv2 - CurV0 - CurUp * dot((fv2 - CurV0),CurUp)); // length of vector v0 -> v2 projected onto the ground (10)

    vec3 fv1 = CurV0 + blade_height * CurUp * max(1 - l_proj / blade_height, 0.05 * (l_proj / blade_height, 1.0));

    float L0 = distance(fv2, CurV0);
    float L1 = distance(fv2, fv1) + distance(fv1, CurV0);
    float n = 3.0; // 3 control points
    float L = (2.0*L0 + (n-1.0)*L1)/(n+1.0); // (12) approximate bezier curve length
    // heuristic correction to maintain the length of grass
    CurBlade.v1.xyz = CurV0 + (blade_height / L) * (fv1 - CurV0);
    CurBlade.v2.xyz = CurBlade.v1.xyz + (blade_height / L)*(fv2 - fv1);
    blades[index] = CurBlade;
       // TODO Collision 
#pragma region COLLISION
    // center of the curve
    CurV0 = CurBlade.v0.xyz;
    CurV1 = CurBlade.v1.xyz;
    CurV2 = CurBlade.v2.xyz;
    CurUp = CurBlade.up.xyz;
    bool isCollide = false;

    vec3 m = 0.25 * CurV0 + 0.5 * CurV1 + 0.25 * CurV2;

    float ball_radius = 2.0;
    // let's simulate a ball rotating around
    float rotate_center_omega = 0.5;
    float rotate_angle = rotate_center_omega * totalTime;
    vec3 center_offset = vec3(1, 1, 1);
    vec3 ball_center = 4.0 * vec3(cos(rotate_angle), 0, sin(rotate_angle)) + center_offset;
    // test center point and v2
    vec3 v2cPos = ball_center - CurV2;
    float l = length(v2cPos);
    float d2 = min(l - ball_radius, 0.0);
    // push to nearest border
    vec3 collVec = v2cPos / l * d2;
    
    isCollide = d2 < 0.0 ? true: isCollide; 

    vec3 mcPos = ball_center - m;
    l = length(mcPos);
    d2 = min(l - ball_radius, 0.0);
    collVec += mcPos / l * d2;
    isCollide = d2 < 0.0 ? true: isCollide; 

    fv2 = CurV2 + collVec;

    // State Validate
    fv2 = fv2 - CurUp * min(CurUp * (fv2 - CurV0), 0.0); // (9)

    l_proj = length(fv2 - CurV0 - CurUp * dot((fv2 - CurV0),CurUp)); // length of vector v0 -> v2 projected onto the ground (10)

    fv1 = CurV0 + blade_height * CurUp * max(1 - l_proj / blade_height, 0.05 * (l_proj / blade_height, 1.0));

    L0 = distance(fv2, CurV0);
    L1 = distance(fv2, fv1) + distance(fv1, CurV0);
    n = 3.0; // 3 control points
    L = (2.0*L0 + (n-1.0)*L1)/(n+1.0); // (12) approximate bezier curve length
    // heuristic correction to maintain the length of grass
    CurBlade.v1.xyz = CurV0 + (blade_height / L) * (fv1 - CurV0);
    CurBlade.v2.xyz = CurBlade.v1.xyz + (blade_height / L)*(fv2 - fv1);
    blades[index] = CurBlade;


#pragma endregion

    culledBlades[atomicAdd(numBlades.vertexCount , 1)] = CurBlade;

}
